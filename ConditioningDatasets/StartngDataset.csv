TL,Word-TL,IR,NL,Source
"G [0,3]( not muC and  not muD) and F [1,2](muA and F [0,1]muB)","Always [0,3]( not muC and not muD) and Finally [1,2](muA and Finally [0,1]muB)","{'and': {'left_node': {'always_bounded': {'child_node': {'and': {'left_node': {'not': {'child_node': 'proposition'}}, 'right_node': {'not': {'child_node': 'proposition'}}}}, 'bound': [0.0, 3.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'and': {'left_node': 'proposition', 'right_node': {'eventually_bounded': {'child_node': 'proposition', 'bound': [0.0, 1.0]}}}}, 'bound': [1.0, 2.0]}}}}",Consider a scenario in which a robot operates in a hospital environment. The robot needs to perform two time-critical sequential delivery tasks in regions A and B while avoiding areas C and D in which potentially humans operate.,https://arxiv.org/pdf/2104.01503.pdf
"G [0,3]( not muC and  not muD) and F [1,2](muA and F [0,1]muB)","Always [0,3]( not muC and not muD) and Finally [1,2](muA and Finally [0,1]muB)","{'and': {'left_node': {'always_bounded': {'child_node': {'and': {'left_node': {'not': {'child_node': 'proposition'}}, 'right_node': {'not': {'child_node': 'proposition'}}}}, 'bound': [0.0, 3.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'and': {'left_node': 'proposition', 'right_node': {'eventually_bounded': {'child_node': 'proposition', 'bound': [0.0, 1.0]}}}}, 'bound': [1.0, 2.0]}}}}","For the entire duration from time 0 to time 3, the robot should avoid regions C and D. Additionally, between time 1 and time 2, the robot should be in region A and then, within the next time unit, it should move to region B.",https://arxiv.org/pdf/2104.01503.pdf
"G [0.0, 2.2e11](((angle >= 0.2) or (angle  <=  -0.2)) implies (speed  <=  22.01))","Always [0.0, 2.2e11](((angle >= 0.2) or (angle <= -0.2)) implies (speed <= 22.01))","{'always_bounded': {'child_node': {'implies': {'left_node': {'or': {'left_node': {'predicate': {'left_node': 'angle', 'right_node': 0.2, 'type': '>='}}, 'right_node': {'predicate': {'left_node': 'angle', 'right_node': 0.2, 'type': '<='}}}}, 'right_node': {'predicate': {'left_node': 'speed', 'right_node': 22.01, 'type': '<='}}}}, 'bound': [0.0, 220000000000.0]}}","The speed of the car must be below some upper bound a ∈ [15, 25] if the angle is larger than 0.2 or below -0.2. Intuitively, this property captures required slowing down of the car when making a significant turn.",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"G [0.0, 2.2e11](((angle >= 0.2) or (angle  <=  -0.2)) implies (speed  <=  22.01))","Always [0.0, 2.2e11](((angle >= 0.2) or (angle <= -0.2)) implies (speed <= 22.01))","{'always_bounded': {'child_node': {'implies': {'left_node': {'or': {'left_node': {'predicate': {'left_node': 'angle', 'right_node': 0.2, 'type': '>='}}, 'right_node': {'predicate': {'left_node': 'angle', 'right_node': 0.2, 'type': '<='}}}}, 'right_node': {'predicate': {'left_node': 'speed', 'right_node': 22.01, 'type': '<='}}}}, 'bound': [0.0, 220000000000.0]}}","For the entire duration from time 0 to 2.2e11, if the angle is either greater than or equal to 0.2 or less than or equal to -0.2, then the speed should be less than or equal to 22.01. This captures the behavior of slowing down the car during significant turns.",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"G [0.0, 2.2e11](((torque >= 1.6) or (torque  <=  -1.6)) implies (speed  <=  23.64))","Always [0.0, 2.2e11](((torque >= 1.6) or (torque <= -1.6)) implies (speed <= 23.64))","{'always_bounded': {'child_node': {'implies': {'left_node': {'or': {'left_node': {'predicate': {'left_node': 'torque', 'right_node': 1.6, 'type': '>='}}, 'right_node': {'predicate': {'left_node': 'torque', 'right_node': 1.6, 'type': '<='}}}}, 'right_node': {'predicate': {'left_node': 'speed', 'right_node': 23.64, 'type': '<='}}}}, 'bound': [0.0, 220000000000.0]}}","Similar to the property above, the speed of the car must be low while applying a large torque (say, more than 1.6). Usually, torque is applied to turn along with brake when driving safely to avoid slipping.",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"G [0.0, 2.2e11](((torque >= 1.6) or (torque  <=  -1.6)) implies (speed  <=  23.64))","Always [0.0, 2.2e11](((torque >= 1.6) or (torque <= -1.6)) implies (speed <= 23.64))","{'always_bounded': {'child_node': {'implies': {'left_node': {'or': {'left_node': {'predicate': {'left_node': 'torque', 'right_node': 1.6, 'type': '>='}}, 'right_node': {'predicate': {'left_node': 'torque', 'right_node': 1.6, 'type': '<='}}}}, 'right_node': {'predicate': {'left_node': 'speed', 'right_node': 23.64, 'type': '<='}}}}, 'bound': [0.0, 220000000000.0]}}","For the entire duration from time 0 to 2.2e11, if the torque is either greater than or equal to 1.6 or less than or equal to -1.6, then the speed should be less than or equal to 23.64. This captures the behavior of slowing down the car when applying a large torque.",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"G [0.0, 2.2e11]((angle >= 0.06) implies (torque >= -1.06))","Always [0.0, 2.2e11]((angle >= 0.06) implies (torque >= -1.06))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'angle', 'right_node': 0.06, 'type': '>='}}, 'right_node': {'predicate': {'left_node': 'torque', 'right_node': 1.06, 'type': '>='}}}}, 'bound': [0.0, 220000000000.0]}}","For the entire duration from time 0 to 2.2e11, if the angle is greater than or equal to 0.06, then the torque should be greater than or equal to -1.06. This captures the behavior of avoiding large negative torques during high turn angles. ",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"G [0.0, 2.2e11]((angle  <=  -0.06) implies (torque  <=  1.25))","Always [0.0, 2.2e11]((angle <= -0.06) implies (torque <= 1.25))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'angle', 'right_node': 0.06, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'torque', 'right_node': 1.25, 'type': '<='}}}}, 'bound': [0.0, 220000000000.0]}}","Similarly, when the turn angle is low (say, below -0.06), the magnitude of positive torque applied is below a threshold to avoid late sharp compensating torques. This property states that for the entire duration from time 0 to 2.2e11, if the angle is less than or equal to -0.06, then the torque should be less than or equal to 1.25. This captures the behavior of avoiding large positive torques during low turn angles. ",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"G [0.0, 2.2e11]((torque  <=  0.0) implies F [0.0, 1.2e8](angle  <=  0.01))","Always [0.0, 2.2e11]((torque <= 0.0) implies Finally [0.0, 1.2e8](angle <= 0.01))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'torque', 'right_node': 0.0, 'type': '<='}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'angle', 'right_node': 0.01, 'type': '<='}}, 'bound': [0.0, 120000000.0]}}}}, 'bound': [0.0, 220000000000.0]}}","The torque also must not be so low that the turns are very slow and so, we require that application of negative torque should decrease the angle below a threshold within some fixed time. This property states that for the entire duration from time 0 to 2.2e11, if the torque is less than or equal to 0.0, then within the next 1.2e8 time units, the angle should be less than or equal to 0.01. This captures the behavior of ensuring that negative torque results in a decrease in the angle below a certain threshold within a fixed time. ",https://escholarship.org/content/qt1sv1p5pr/qt1sv1p5pr.pdf?t=qt1g94
"F [0,30]((vel > 100) implies G [0,20](vel > 100))","Finally [0,30]((vel > 100) implies Always [0,20](vel > 100))","{'eventually_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'vel', 'right_node': 100.0, 'type': '>'}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'vel', 'right_node': 100.0, 'type': '>'}}, 'bound': [0.0, 20.0]}}}}, 'bound': [0.0, 30.0]}}","At some time in the first 30 s, the vehicle speed (vel) will go over 100 km/h and stay above 100 km/h for 20 s",https://link.springer.com/content/pdf/10.1007/978-3-319-63387-9_11.pdf
"F [0,30]((vel > 100) implies G [0,20](vel > 100))","Finally [0,30]((vel > 100) implies Always [0,20](vel > 100))","{'eventually_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'vel', 'right_node': 100.0, 'type': '>'}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'vel', 'right_node': 100.0, 'type': '>'}}, 'bound': [0.0, 20.0]}}}}, 'bound': [0.0, 30.0]}}","At some point within the first 30 seconds, if the vehicle speed goes over 100 km/h, then it should stay above 100 km/h for the next continuous 20 seconds.",https://link.springer.com/content/pdf/10.1007/978-3-319-63387-9_11.pdf
"(G− [1,1]u0 = 0) and (F− [1,1]x3 > 10)","(Always− [1,1]u0 = 0) and (F− [1,1]x3 > 10)",{'tree': 'not available'},"For the traffic system, the formula represents that the event or actuation u0 should never occur. Additionally, there's an expectation that the number of vehicles (or whatever x3 represents) will exceed 10 at the next time step. For instance, if x3 represents the number of vehicles on a road, then the formula captures the scenario where more than 10 vehicles are anticipated on that road in the immediate future.",https://arxiv.org/pdf/1904.03649.pdf
(F(G (alert12 == False  and alert13 == False ))) implies (G (F  not tsafeControl1)),(Finally (Always (alert12 == False and alert13 == False ))) implies (Always (Finally not tsafeControl1)),"{'implies': {'left_node': {'eventually': {'child_node': {'always': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'alert12', 'right_node': 'False', 'type': '=='}}, 'right_node': {'predicate': {'left_node': 'alert13', 'right_node': 'False', 'type': '=='}}}}}}}}, 'right_node': {'always': {'child_node': {'eventually': {'child_node': {'not': {'child_node': 'tsafeControl1'}}}}}}}}","If there comes a point in time where aircraft 1 no longer receives collision alerts with respect to aircraft 2 and aircraft 3, then it is guaranteed that, at some future moments, the TSAFE controller will relinquish control of aircraft 1",
"G [0,3] (y > 3) and  not (y > 6)","Always [0,3] (y > 3) and not (y > 6)","{'and': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 3.0, 'type': '>'}}, 'bound': [0.0, 3.0]}}, 'right_node': {'not': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 6.0, 'type': '>'}}}}}}","Over a time interval from 0 to 3, the robot's position or state represented by y should always be greater than 3 but should never exceed 6.",
"G [0,10] not(obs) and F [0,10] (target1 or target2) and F [0,10] goal and G [0,10] ((-2 <= u) and (u <= 2))","Always [0,10] not(obs) and Finally [0,10] (target1 or target2) and Finally [0,10] goal and Always [0,10] ((-2 <= u) and (u <= 2))","{'and': {'left_node': {'and': {'left_node': {'and': {'left_node': {'always_bounded': {'child_node': {'not': {'child_node': 'obs'}}, 'bound': [0.0, 10.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'or': {'left_node': 'target1', 'right_node': 'target2'}}, 'bound': [0.0, 10.0]}}}}, 'right_node': {'eventually_bounded': {'child_node': 'goal', 'bound': [0.0, 10.0]}}}}, 'right_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 2.0, 'right_node': 'u', 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'u', 'right_node': 2.0, 'type': '<='}}}}, 'bound': [0.0, 10.0]}}}}","Within a 10-step timeframe, the robot must avoid obstacles, visit either of two target regions, and reach a goal region. Throughout this period, the robot's control input should remain bounded between -2 and 2.",https://arxiv.org/pdf/2006.05239.pdf
"G [0,20] not (Obs1 or Obs2) and F [0,20](Goal) and G [0,10]((-1 <= u) and (u <= 1))","Always [0,20] not (Obs1 or Obs2) and Finally [0,20](Goal) and Always [0,10]((-1 <= u) and (u <= 1))","{'and': {'left_node': {'and': {'left_node': {'always_bounded': {'child_node': {'not': {'child_node': {'or': {'left_node': 'Obs1', 'right_node': 'Obs2'}}}}, 'bound': [0.0, 20.0]}}, 'right_node': {'eventually_bounded': {'child_node': 'Goal', 'bound': [0.0, 20.0]}}}}, 'right_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 1.0, 'right_node': 'u', 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'u', 'right_node': 1.0, 'type': '<='}}}}, 'bound': [0.0, 10.0]}}}}","Over a 20-step timeframe, the robot must consistently avoid two specific obstacles, Obs1 and Obs2. It also has the objective to reach a designated goal region within this period. For the first 10 steps of this duration, the robot's control input should be bounded between -1 and 1.",https://arxiv.org/pdf/2006.05239.pdf
"F [1,40] (Goal1 and Goal2 ) and G [1,40]  not Unsafe","Finally [1,40] (Goal1 and Goal2 ) and Always [1,40] not Unsafe","{'and': {'left_node': {'eventually_bounded': {'child_node': {'and': {'left_node': 'proposition', 'right_node': 'proposition'}}, 'bound': [1.0, 40.0]}}, 'right_node': {'always_bounded': {'child_node': {'not': {'child_node': 'proposition'}}, 'bound': [1.0, 40.0]}}}}","The system is simulated using a discretized step size Δt = 0.05 for 40 steps. The vehicle needs to visit both goals 1 and 2, but the order is not specified. Throughout this period, the vehicle must consistently avoid any unsafe regions or states.",https://dl.acm.org/doi/pdf/10.1145/3358239
"F [1,5](I>=50)","Finally [1,5](I>=50)","{'eventually_bounded': {'child_node': {'predicate': {'left_node': 'I', 'right_node': 50.0, 'type': '>='}}, 'bound': [1.0, 5.0]}}","At some time between 1 and 5 time units, the number of infected individuals should be at least 50",https://arxiv.org/pdf/1309.0867.pdf
"G [1,5] Infected >= 50 and   G [0.25,5] (FutureInfected >= Infected)","Always [1,5] Infected >= 50 and  Always [0.25,5] (FutureInfected >= Infected)","{'and': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Infected', 'right_node': 50.0, 'type': '>='}}, 'bound': [1.0, 5.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'FutureInfected', 'right_node': 'Infected', 'type': '>='}}, 'bound': [0.25, 5.0]}}}}","Throughout the time interval from 1 to 5, the number of infected individuals should be at least 50. Furthermore, starting from a quarter time unit after the beginning of this interval and continuing up to time 5, the number of infected individuals should not decrease.",https://arxiv.org/pdf/1309.0867.pdf
"G [0,300] F [0,100] (SpeciesX >= Future_SpeciesY)","Always [0,300] Finally [0,100] (SpeciesX >= Future_SpeciesY)","{'always_bounded': {'child_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'SpeciesX', 'right_node': 'Future_SpeciesY', 'type': '>='}}, 'bound': [0.0, 100.0]}}, 'bound': [0.0, 300.0]}}","A pedator species X is hunted by a predator species Y in the simulation. Throughout the entire simulation duration from time 0 to 300, within any 100 time units, there should be at least one moment where the prey population exceeds or equals the future predator population.",
"F [1,40] (Goal1 and Goal2 ) and G [1,40]  not Unsafe","Finally [1,40] (Goal1 and Goal2 ) and Always [1,40] not Unsafe","{'and': {'left_node': {'eventually_bounded': {'child_node': {'and': {'left_node': 'proposition', 'right_node': 'proposition'}}, 'bound': [1.0, 40.0]}}, 'right_node': {'always_bounded': {'child_node': {'not': {'child_node': 'proposition'}}, 'bound': [1.0, 40.0]}}}}","Within a simulation span of 40 steps with a discretized step size of Δt = 0.05, the vehicle is expected to reach both Goal1 and Goal2, though the sequence is not predetermined. Simultaneously, the vehicle should consistently steer clear of any unsafe zones or conditions during this timeframe.",
"G [0,3] (y > 3) and  not (y > 6)","Always [0,3] (y > 3) and not (y > 6)","{'and': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 3.0, 'type': '>'}}, 'bound': [0.0, 3.0]}}, 'right_node': {'not': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 6.0, 'type': '>'}}}}}}","Throughout the time span from 0 to 3, the position or state of the robot, represented by y, should consistently be above 3 but should never surpass 6.",
(F(G (alert12 == False  and alert13 == False ))) implies (G (F  not tsafeControl1)),(Finally (Always (alert12 == False and alert13 == False ))) implies (Always (Finally not tsafeControl1)),"{'implies': {'left_node': {'eventually': {'child_node': {'always': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'alert12', 'right_node': 'False', 'type': '=='}}, 'right_node': {'predicate': {'left_node': 'alert13', 'right_node': 'False', 'type': '=='}}}}}}}}, 'right_node': {'always': {'child_node': {'eventually': {'child_node': {'not': {'child_node': 'tsafeControl1'}}}}}}}}","If there arises a situation where aircraft 1 ceases to receive collision alerts concerning aircraft 2 and 3, then it's guaranteed that in future instances, the TSAFE controller will cede control over aircraft 1.",
"G [0,10] not(obs) and F [0,10] (target1 or target2) and F [0,10] goal and G [0,10] ((-2 <= u) and (u <= 2))","Always [0,10] not(obs) and Finally [0,10] (target1 or target2) and Finally [0,10] goal and Always [0,10] ((-2 <= u) and (u <= 2))","{'and': {'left_node': {'and': {'left_node': {'always_bounded': {'child_node': {'not': {'child_node': {'or': {'left_node': 'Obs1', 'right_node': 'Obs2'}}}}, 'bound': [0.0, 20.0]}}, 'right_node': {'eventually_bounded': {'child_node': 'Goal', 'bound': [0.0, 20.0]}}}}, 'right_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 1.0, 'right_node': 'u', 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'u', 'right_node': 1.0, 'type': '<='}}}}, 'bound': [0.0, 10.0]}}}}","Within a 10-step time frame, the robot is mandated to steer clear of any obstacles, make a visit to one of the two target zones, and ultimately reach its goal. Concurrently, the control input of the robot should consistently remain within the range of -2 to 2.",
"G [0,300] F [0,100] (SpeciesX >= Future_SpeciesY)","Always [0,300] Finally [0,100] (SpeciesX >= Future_SpeciesY)","{'always_bounded': {'child_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'SpeciesX', 'right_node': 'Future_SpeciesY', 'type': '>='}}, 'bound': [0.0, 100.0]}}, 'bound': [0.0, 300.0]}}","In a simulation that runs from time 0 to 300, it's essential that within any given 100 time units, there exists at least one instance where the population of prey species X is greater than or equivalent to the anticipated population of predator species Y.",
"G [0,5](s > 2) and F [3,5](s == 5)","Always [0,5](s > 2) and Finally [3,5](s == 5)","{'and': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 's', 'right_node': 2.0, 'type': '>'}}, 'bound': [0.0, 5.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 's', 'right_node': 5.0, 'type': '=='}}, 'bound': [3.0, 5.0]}}}}","Throughout the time span from 0 to 5, the signal s should consistently be greater than 2. Additionally, between time 3 and 5, s should reach a value of 5.",
"F [0,10](p < 0) implies G [0,3](q > 1)","Finally [0,10](p < 0) implies Always [0,3](q > 1)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'p', 'right_node': 0.0, 'type': '<'}}, 'bound': [0.0, 10.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'q', 'right_node': 1.0, 'type': '>'}}, 'bound': [0.0, 3.0]}}}}","If at any point within the first 10 time units p goes below 0, then q should remain above 1 for the next continuous 3 time units.",
"F [1,5](v == 10) and G [1,5] not w","Finally [1,5](v == 10) and Always [1,5] not w","{'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'v', 'right_node': 10.0, 'type': '=='}}, 'bound': [1.0, 5.0]}}, 'right_node': {'always_bounded': {'child_node': {'not': {'child_node': 'w'}}, 'bound': [1.0, 5.0]}}}}","Somewhere between time 1 and 5, v should equal 10, and throughout this period, w should never be true.",
"G [0,7]((x >= 3) implies (y  <=  5))","Always [0,7]((x >= 3) implies (y <= 5))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'x', 'right_node': 3.0, 'type': '>='}}, 'right_node': {'predicate': {'left_node': 'y', 'right_node': 5.0, 'type': '<='}}}}, 'bound': [0.0, 7.0]}}","For the entire duration from time 0 to 7, if x is greater than or equal to 3, then y should be less than or equal to 5.",
"G [2,9]((b  <=  2) implies (c > 3))","Always [2,9]((b <= 2) implies (c > 3))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'b', 'right_node': 2.0, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'c', 'right_node': 3.0, 'type': '>'}}}}, 'bound': [2.0, 9.0]}}","From time 2 to 9, if b is less than or equal to 2, then c should be greater than 3.",
"G [0,10]((f == 1) and (g == 0))","Always [0,10]((f == 1) and (g == 0))","{'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'f', 'right_node': 1.0, 'type': '=='}}, 'right_node': {'predicate': {'left_node': 'g', 'right_node': 0.0, 'type': '=='}}}}, 'bound': [0.0, 10.0]}}","Throughout the time span from 0 to 10, f should always be 1 and g should always be 0.",
"F [1,7](h > 4) and G [1,7]  not i","Finally [1,7](h > 4) and Always [1,7] not i","{'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'h', 'right_node': 4.0, 'type': '>'}}, 'bound': [1.0, 7.0]}}, 'right_node': {'always_bounded': {'child_node': {'not': {'child_node': 'proposition'}}, 'bound': [1.0, 7.0]}}}}","Between time 1 and 7, h should surpass 4 at some point, and i should never be true during this period.",
"G [2,5]((j  <=  3) implies (k > 2))","Always [2,5]((j <= 3) implies (k > 2))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'j', 'right_node': 3.0, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'k', 'right_node': 2.0, 'type': '>'}}}}, 'bound': [2.0, 5.0]}}","From time 2 to 5, if j is less than or equal to 3, then k should be greater than 2",
"G [1,6] ((n == 0) and (o == 1))","Always [1,6] ((n == 0) and (o == 1))","{'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'n', 'right_node': 0.0, 'type': '=='}}, 'right_node': {'predicate': {'left_node': 'o', 'right_node': 1.0, 'type': '=='}}}}, 'bound': [1.0, 6.0]}}","Throughout the time span from 1 to 6, n should always be 0 and o should always be 1.",
"F [2,8](p > 5) and G [2,8]  not q","Finally [2,8](p > 5) and Always [2,8] not q","{'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'p', 'right_node': 5.0, 'type': '>'}}, 'bound': [2.0, 8.0]}}, 'right_node': {'always_bounded': {'child_node': {'not': {'child_node': 'proposition'}}, 'bound': [2.0, 8.0]}}}}","Between time 2 and 8, p should surpass 5 at some point, and q should never be true during this period.",
"G [3,10]((r  <=  4) implies (s > 3))","Always [3,10]((r <= 4) implies (s > 3))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'r', 'right_node': 4.0, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 's', 'right_node': 3.0, 'type': '>'}}}}, 'bound': [3.0, 10.0]}}","From time 3 to 10, if r is less than or equal to 4, then s should be greater than 3.",
"G [2,7]((v == 2) and (w == 0))","Always [2,7]((v == 2) and (w == 0))","{'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'v', 'right_node': 2.0, 'type': '=='}}, 'right_node': {'predicate': {'left_node': 'w', 'right_node': 0.0, 'type': '=='}}}}, 'bound': [2.0, 7.0]}}","Throughout the time span from 2 to 7, v should always be 2 and w should always be 0.",
"F [3,9](x > 6) and G [3,9]  not y","Finally [3,9](x > 6) and Always [3,9] not y","{'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'x', 'right_node': 6.0, 'type': '>'}}, 'bound': [3.0, 9.0]}}, 'right_node': {'always_bounded': {'child_node': {'not': {'child_node': 'proposition'}}, 'bound': [3.0, 9.0]}}}}","Between time 3 and 9, x should surpass 6 at some point, and y should never be true during this period.",
"G [1,8]((z  <=  5) implies (a > 4))","Always [1,8]((z <= 5) implies (a > 4))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'z', 'right_node': 5.0, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'a', 'right_node': 4.0, 'type': '>'}}}}, 'bound': [1.0, 8.0]}}","From time 1 to 8, if z is less than or equal to 5, then a should be greater than 4.",
"G [0,24] F [0,6](Temperature > 35)","Always [0,24] Finally [0,6](Temperature > 35)","{'always_bounded': {'child_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Temperature', 'right_node': 35.0, 'type': '>'}}, 'bound': [0.0, 6.0]}}, 'bound': [0.0, 24.0]}}","A greenhouse monitoring system. Throughout a day (0 to 24 hours), there should be at least one 6-hour window where the temperature consistently exceeds 35°C, indicating potential harm to the plants.",
"F [0,5](Battery < 20) implies G [0,2](Charging == True)","Finally [0,5](Battery < 20) implies Always [0,2](Charging == True)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Battery', 'right_node': 20.0, 'type': '<'}}, 'bound': [0.0, 5.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Charging', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 2.0]}}}}","A smart device's power management system. If at any point within 5 hours the battery level drops below 20%, the device should start charging within the next 2 hours.",
"G [0,60]((HeartRate > 100) implies F [0,10](Alert == True))","Always [0,60]((HeartRate > 100) implies Finally [0,10](Alert == True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'HeartRate', 'right_node': 100.0, 'type': '>'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Alert', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 10.0]}}}}, 'bound': [0.0, 60.0]}}","A health monitoring wearable. Over an hour (0 to 60 minutes), if the heart rate exceeds 100 bpm, the device should raise an alert within the next 10 minutes.",
"F [0,7](StockPrice > 100) and G [0,7](StockPrice < 150)","Finally [0,7](StockPrice > 100) and Always [0,7](StockPrice < 150)","{'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'StockPrice', 'right_node': 100.0, 'type': '>'}}, 'bound': [0.0, 7.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'StockPrice', 'right_node': 150.0, 'type': '<'}}, 'bound': [0.0, 7.0]}}}}","A stock market prediction tool. Within a week (0 to 7 days), the stock price is expected to surpass $100 but should never exceed $150.",
"G [0,12]((WaterLevel < 10) implies F [0,3](Refill == True))","Always [0,12]((WaterLevel < 10) implies Finally [0,3](Refill == True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'WaterLevel', 'right_node': 10.0, 'type': '<'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Refill', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 3.0]}}}}, 'bound': [0.0, 12.0]}}","An automatic pet water dispenser. Over a 12-hour period, if the water level drops below 10%, the dispenser should initiate a refill within the next 3 hours.",
"F [0,30](Traffic > 100) implies G [0,10](SignalRed == True)","Finally [0,30](Traffic > 1000) implies Always [0,10](SignalRed ==True)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Traffic', 'right_node': 1000.0, 'type': '>'}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'SignalRed', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 10.0]}}}}","A smart traffic management system. If at any point within 30 minutes the traffic exceeds 1000 cars, the traffic signal should turn red for the next 10 minutes to manage the flow.",
"G [0,48]((SoilMoisture < 30) implies F [0,6](Irrigation == True))","Always [0,48]((SoilMoisture < 30) implies Finally [0,6](Irrigation == True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'SoilMoisture', 'right_node': 30.0, 'type': '<'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Irrigation', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 6.0]}}}}, 'bound': [0.0, 48.0]}}","A smart farming system. Over two days (0 to 48 hours), if the soil moisture drops below 30%, the irrigation system should be turned on within the next 6 hours.",
"F [0,15](UserActivity == Inactive) implies G [0,5](Notifications == False)","Finally [0,15](UserActivity == Inactive) implies Always [0,5](Notifications == False)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'UserActivity', 'right_node': 'Inactive', 'type': '=='}}, 'bound': [0.0, 15.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Notifications', 'right_node': 'False', 'type': '=='}}, 'bound': [0.0, 5.0]}}}}","A smartphone's Do Not Disturb feature. If a user is detected as inactive for 15 minutes, the phone should mute notifications for the next 5 minutes.",
"G [0,72]((Inventory < 50 items) implies F [0,24](Restock == True))","Always [0,72]((Inventory < 50 items) implies Finally [0,24](Restock == True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'Inventory', 'right_node': 50.0, 'type': '<'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Restock', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 24.0]}}}}, 'bound': [0.0, 72.0]}}","A retail store's inventory management system. Over three days (0 to 72 hours), if the inventory drops below 50 items, there should be a restock within the next 24 hours.",
"F [0,3](Temperature < 0) and G [0,3](Heating == True)","Finally [0,3](Temperature < 0) and Always [0,3](Heating == True)","{'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Temperature', 'right_node': 0.0, 'type': '<'}}, 'bound': [0.0, 3.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Heating', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 3.0]}}}}","A home's smart thermostat system. Within 3 hours, if the temperature drops below 0°C, the heating system should be turned on and remain on.",
"F [0,200](∣xstart​−x∣ <= 0.05)","Finally [0,200](∣xstart​−x∣ <= 0.05)",{'tree': 'not available'},"For a continuous duration of 200 time units, the value of x remains within 0.05 units of its initial value at the start of that duration",
"G [0,10]((Pressure>5) implies F [0,2](ValveOpen == True))","Always [0,10]((Pressure>5) implies Finally [0,2](ValveOpen == True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'Pressure', 'right_node': 5.0, 'type': '>'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'ValveOpen', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 2.0]}}}}, 'bound': [0.0, 10.0]}}","A pressure management system in a factory. If the pressure exceeds 5 units at any time in a 10-hour window, a valve should open within the next 2 hours to release it.",
"G [0,DayDuration]((LightIntensity>70) implies F [0,ResponseTime](Shades==Down))","Always [0,DayDuration]((LightIntensity>70) implies Finally [0,ResponseTime](Shades==Down))","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Rain', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 12.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Irrigation', 'right_node': 'False', 'type': '=='}}, 'bound': [0.0, 3.0]}}}}","This formula is the same as the first one. Throughout the entire duration of a day, whenever the light intensity exceeds 70%, the shades should be brought down within a specified response time",
"F [0,12](Rain == True) implies G [0,3](Irrigation == False)","Finally [0,12](Rain == True) implies Always [0,3](Irrigation == False)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Rain', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 12.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Irrigation', 'right_node': 'False', 'type': '=='}}, 'bound': [0.0, 3.0]}}}}","A garden's smart irrigation system. If it rains at any point in a 12-hour window, the irrigation system should remain off for at least the next 3 hours.",
"G [0,8]((Temperature>25) implies F [0,1](Cooling = True))","Always [0,8]((Temperature>25) implies Finally [0,1](Cooling == True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'Temperature', 'right_node': 25.0, 'type': '>'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Cooling', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 1.0]}}}}, 'bound': [0.0, 8.0]}}","An office's air conditioning system. If the temperature exceeds 25°C at any time during an 8-hour workday, the cooling system should activate within the next hour.",
"G [0,DayDuration]((LightIntensity>70) implies F [0,ResponseTime](Shades==Down))","Always [0,DayDuration]((LightIntensity>70) implies Finally [0,ResponseTime](Shades==Down))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'SoilMoisture', 'right_node': 20.0, 'type': '<'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Watering', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 6.0]}}}}, 'bound': [0.0, 48.0]}}","A laptop's power management system. If the battery drops below 15% within 6 hours, it should start charging within the next 2 hours.",
"G [0,48]((SoilMoisture<20) implies F [0,6](Watering== True))","Always [0,48]((SoilMoisture<20) implies Finally [0,6](Watering== True))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'SoilMoisture', 'right_node': 20.0, 'type': '<'}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Watering', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 6.0]}}}}, 'bound': [0.0, 48.0]}}","Over a 48-hour period, whenever the soil moisture drops below 20%, the watering system should be turned on within the next 6 hours.",
"F [0,3](Stock<10) implies G [0,1](OrderPlaced == True)","Finally [0,3](Stock<10) implies Always [0,1](OrderPlaced == True)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Stock', 'right_node': 10.0, 'type': '<'}}, 'bound': [0.0, 3.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'OrderPlaced', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 1.0]}}}}","A retail store's inventory system. If stock drops below 10 items within 3 days, an order should be placed within the next day.",
"G [0,7]((TrafficDensity>80) implies (F [0,2](Signal== Green) and G [0,2](Signal== Green)))","Always [0,7]((TrafficDensity>80) implies (Finally [0,2](Signal== Green) and Always [0,2](Signal== Green)))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'TrafficDensity', 'right_node': 80.0, 'type': '>'}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Signal', 'right_node': 'Green', 'type': '=='}}, 'bound': [0.0, 2.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Signal', 'right_node': 'Green', 'type': '=='}}, 'bound': [0.0, 2.0]}}}}}}, 'bound': [0.0, 7.0]}}","A city's traffic management system. If traffic density exceeds 80% at any time in a 7-hour window, the traffic signal should turn green within the next 2 hours and stay green for those 2 hours to ease congestion.",
"F [0,5](Noise>80)implies G [5,6](AlarmActivated == True)","Finally [0,5](Noise>80) implies Always [5,6](AlarmActivated == True)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Noise', 'right_node': 80.0, 'type': '>'}}, 'bound': [0.0, 5.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'AlarmActivated', 'right_node': 'True', 'type': '=='}}, 'bound': [5.0, 6.0]}}}}","For a security system in a quiet zone. If noise levels exceed 80dB within 5 minutes, an alarm should activate within the next minute.",
"G [0,24]((AirQuality<40) implies (F [0,3](Purifier== True) and  G [0,3](Purifier== True)))","Always [0,24]((AirQuality<40) implies (Finally [0,3](Purifier= True) and Always [0,3](Purifier= True)))","{'always_bounded': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'AirQuality', 'right_node': 40.0, 'type': '<'}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Purifier', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 3.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'Purifier', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 3.0]}}}}}}, 'bound': [0.0, 24.0]}}","A home's air purification system. If air quality drops below 40% at any point during a 24-hour day, the air purifier should activate within the next 3 hours and stay on for those 3 hours.",
"G [0,12]((WindSpeed>50km) implies F [0,1](TurbinesOn==False)","Always [0,12]((WindSpeed>50km) implies Finally [0,1](TurbinesOn==False)"," 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Refill', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 3.0]}}}}, 'bound': [0.0, 12.0]}}","A wind farm's safety system. If wind speed goes above 50km/h at any time in a 12-hour period, the turbines should shut down within the next hour.",
"F [0,7] (UserInactive == True) implies G [0,2](ScreenOn == False)","Finally [0,7] (UserInactive == True) implies Always [0,2](ScreenOn == False)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'UserInactive', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 7.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'ScreenOn', 'right_node': 'False', 'type': '=='}}, 'bound': [0.0, 2.0]}}}}","A computer's power-saving feature. If a user is inactive for 7 minutes, the screen should turn off for at least the next 2 minutes.",
"F [0,4](Temperature<5)implies G [0,2](HeaterOn == True)","Finally [0,4](Temperature<5) implies Always [0,2](HeaterOn == True)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'Temperature', 'right_node': 5.0, 'type': '<'}}, 'bound': [0.0, 4.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'HeaterOn', 'right_node': 'True', 'type': '=='}}, 'bound': [0.0, 2.0]}}}}","A car's automated heating system. If the temperature drops below 5°C within 4 hours, the heater should turn on and remain on for at least the next 2 hours.",
"G(∣x∣>1.0 implies F [0,1](G [0,2]∣x∣<0.8) and  F [0,2.5](G [0,3]∣x∣>0.9))","Always(∣x∣>1.0 implies Finally [0,1](Always [0,2]∣x∣<0.8) and Finally [0,2.5](Always [0,3]∣x∣>0.9))","{'always': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'x', 'right_node': 1.0, 'type': '>'}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'x', 'right_node': 0.8, 'type': '<'}}, 'bound': [0.0, 2.0]}}, 'bound': [0.0, 1.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'x', 'right_node': 0.9, 'type': '>'}}, 'bound': [0.0, 3.0]}}, 'bound': [0.0, 2.5]}}}}}}}}","This formula states that whenever the absolute value of x exceeds 1.0, within the next 1 time unit, x should settle under 0.8 for a 2-long time interval and then exceed 0.9 for a 3-long time interval within the next 2.5 time units.",
"G(∣y∣<0.2 implies F [0,0.5](G [0,1]∣y∣>0.4) and  F [0,1.5](G [0,2.5]∣y∣<0.1))","Always(∣y∣<0.2 implies Finally [0,0.5](Always [0,1]∣y∣>0.4) and Finally [0,1.5](Always [0,2.5]∣y∣<0.1))","{'always': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'y', 'right_node': 0.2, 'type': '<'}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 0.4, 'type': '>'}}, 'bound': [0.0, 1.0]}}, 'bound': [0.0, 0.5]}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 0.1, 'type': '<'}}, 'bound': [0.0, 2.5]}}, 'bound': [0.0, 1.5]}}}}}}}}","This formula suggests that whenever the absolute value of y is less than 0.2, within the next 0.5 time units, y should exceed 0.4 for a 1-long time interval and then drop below 0.1 for a 2.5-long time interval within the next 1.5 time units.",
"G(∣z∣>0.7 implies F [0,0.8](G [0,1.2]∣z∣<0.5) and  F [0,1](G [0,2]∣z∣>0.6))","Always(∣z∣>0.7 implies Finally [0,0.8](Always [0,1.2]∣z∣<0.5) and Finally [0,1](Always [0,2]∣z∣>0.6))","{'always': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'z', 'right_node': 0.7, 'type': '>'}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'z', 'right_node': 0.5, 'type': '<'}}, 'bound': [0.0, 1.2]}}, 'bound': [0.0, 0.8]}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'z', 'right_node': 0.6, 'type': '>'}}, 'bound': [0.0, 2.0]}}, 'bound': [0.0, 1.0]}}}}}}}}","This formula indicates that if the absolute value of z goes beyond 0.7, then within the next 0.8 time units, z should settle under 0.5 for a 1.2-long time interval and then exceed 0.6 for a 2-long time interval within the subsequent time unit.",
"G(∣w∣<0.3 implies F [0,0.4](G [0,1.4]∣w∣>0.5) and  F [0,0.6](G [0,1.6]∣w∣<0.2))","Always(∣w∣<0.3 implies Finally [0,0.4](Always [0,1.4]∣w∣>0.5) and Finally [0,0.6](Always [0,1.6]∣w∣<0.2))","{'always': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'w', 'right_node': 0.3, 'type': '<'}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'w', 'right_node': 0.5, 'type': '>'}}, 'bound': [0.0, 1.4]}}, 'bound': [0.0, 0.4]}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'w', 'right_node': 0.2, 'type': '<'}}, 'bound': [0.0, 1.6]}}, 'bound': [0.0, 0.6]}}}}}}}}","This formula states that whenever the absolute value of w is less than 0.3, within the next 0.4 time units, w should exceed 0.5 for a 1.4-long time interval and then drop below 0.2 for a 1.6-long time interval within the next 0.6 time units.",
"G(∣x∣>1.0implies(F [0,1](G [0,2]∣x∣<0.8) or F [0,2.5](G [0,3]∣x∣>0.9)))","Always(∣x∣>1.0implies(Finally [0,1](Always [0,2]∣x∣<0.8) or Finally [0,2.5](Always [0,3]∣x∣>0.9)))","{'always': {'child_node': {'implies': {'left_node': {'predicate': {'left_node': 'x', 'right_node': 1.0, 'type': '>'}}, 'right_node': {'or': {'left_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'x', 'right_node': 0.8, 'type': '<'}}, 'bound': [0.0, 2.0]}}, 'bound': [0.0, 1.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'x', 'right_node': 0.9, 'type': '>'}}, 'bound': [0.0, 3.0]}}, 'bound': [0.0, 2.5]}}}}}}}}","This formula states that whenever the absolute value of x exceeds 1.0, one of two conditions must hold: within the next 1 time unit, x should settle under 0.8 for a 2-long time interval, or within the next 2.5 time units, x should exceed 0.9 for a 3-long time interval.",
"G(∣y∣<0.2 and  ∣y∣>0.1 implies F [0,0.5](G [0,1]∣y∣>0.4))","Always(∣y∣<0.2 and ∣y∣>0.1 implies Finally [0,0.5](Always [0,1]∣y∣>0.4))","{'always': {'child_node': {'implies': {'left_node': {'and': {'left_node': {'predicate': {'left_node': 'y', 'right_node': 0.2, 'type': '<'}}, 'right_node': {'predicate': {'left_node': 'y', 'right_node': 0.1, 'type': '>'}}}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y', 'right_node': 0.4, 'type': '>'}}, 'bound': [0.0, 1.0]}}, 'bound': [0.0, 0.5]}}}}}}","This formula suggests that if the absolute value of y is between 0.1 and 0.2, then within the next 0.5 time units, y should exceed 0.4 for a 1-long time interval.",
"G(∣z∣>0.7) implies (F [0,0.8](G [0,1.2]∣z∣<0.5) and  G [0,3](∣z∣>0.6))","Always(∣z∣>0.7) implies (Finally [0,0.8](Always [0,1.2]∣z∣<0.5) and Always [0,3](∣z∣>0.6))","{'implies': {'left_node': {'always': {'child_node': {'predicate': {'left_node': 'z', 'right_node': 0.7, 'type': '>'}}}}, 'right_node': {'and': {'left_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'z', 'right_node': 0.5, 'type': '<'}}, 'bound': [0.0, 1.2]}}, 'bound': [0.0, 0.8]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'z', 'right_node': 0.6, 'type': '>'}}, 'bound': [0.0, 3.0]}}}}}}","This formula indicates that if the absolute value of z consistently goes beyond 0.7, then two conditions must hold: within the next 0.8 time units, z should settle under 0.5 for a 1.2-long time interval, and for the next 3 time units, z should consistently remain above 0.6.",
"F [0,2](∣w∣<0.3) implies (G [0,1.4]∣w∣>0.5)","Finally [0,2](∣w∣<0.3) implies (Always [0,1.4]∣w∣>0.5)","{'implies': {'left_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'w', 'right_node': 0.3, 'type': '<'}}, 'bound': [0.0, 2.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'w', 'right_node': 0.5, 'type': '>'}}, 'bound': [0.0, 1.4]}}}}","This formula states that if at any point within the first 2 time units the absolute value of w drops below 0.3, then for the next 1.4 time units, w should consistently remain above 0.5.",
"G(∣v∣>0.6 and  ∣v∣<0.8) implies F [0,1](G [0,2]∣v∣<0.4)","Always(∣v∣>0.6 and ∣v∣<0.8) implies Finally [0,1](Always [0,2]∣v∣<0.4)","{'implies': {'left_node': {'always': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'v', 'right_node': 0.6, 'type': '>'}}, 'right_node': {'predicate': {'left_node': 'v', 'right_node': 0.8, 'type': '<'}}}}}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'v', 'right_node': 0.4, 'type': '<'}}, 'bound': [0.0, 2.0]}}, 'bound': [0.0, 1.0]}}}}","This formula suggests that whenever the absolute value of v is between 0.6 and 0.8, within the next 1 time unit, v should settle under 0.4 for a 2-long time interval.",
"G [0,10](∣PitchAngle∣<25)","Always [0,10](∣PitchAngle∣<25)","{'always_bounded': {'child_node': {'predicate': {'left_node': 'PitchAngle', 'right_node': 25.0, 'type': '<'}}, 'bound': [0.0, 10.0]}}","Throughout the time duration 10s, the absolute pitch angle of the airplane should always be less than 25 degrees to ensure it doesn't climb or descend too steeply.",
"G [0,20] mu < 120","Always [0,20] mu < 120","{'always_bounded': {'child_node': {'predicate': {'left_node': 'mu', 'right_node': 120.0, 'type': '<'}}, 'bound': [0.0, 20.0]}}","Always, in the time interval [0,20], the value of 'v' is less than 120.",AT1
"G [0,10] omega < 4750","Always [0,10] omega < 4750","{'always_bounded': {'child_node': {'predicate': {'left_node': 'omega', 'right_node': 4750.0, 'type': '<'}}, 'bound': [0.0, 10.0]}}","Always, in the time interval [0,10], the value of 'omega' is less than 4750.",AT2
(gear <= 1.5 and gear >= 0.5),(gear <= 1.5 and gear >= 0.5),"{'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 0.5, 'type': '>='}}}}",The gear value is between 0.5 and 1.5 (inclusive).,gear_1_phi
"G [0, 30] (((not (gear <= 1.5 and gear >= 0.5)) and (F [0.001,0.1] (gear <= 1.5 and gear >= 0.5))) implies (F [0.001, 0.1] (G [0,2.5] (gear <= 1.5 and gear >= 0.5))))","Always [0, 30] (((not (gear <= 1.5 and gear >= 0.5)) and (Finally [0.001,0.1] (gear <= 1.5 and gear >= 0.5))) implies (Finally [0.001, 0.1] (Always [0,2.5] (gear <= 1.5 and gear >= 0.5))))","{'always_bounded': {'child_node': {'implies': {'left_node': {'and': {'left_node': {'not': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 0.5, 'type': '>='}}}}}}, 'right_node': {'eventually_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 0.5, 'type': '>='}}}}, 'bound': [0.001, 0.1]}}}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 0.5, 'type': '>='}}}}, 'bound': [0.0, 2.5]}}, 'bound': [0.001, 0.1]}}}}, 'bound': [0.0, 30.0]}}","Always, in the time interval [0,30], if the gear is not between 0.5 and 1.5 and will be in that range in the next [0.001,0.1] time units, then it will remain in that range for the following [0,2.5] time units.",AT51_phi
(gear <= 2.5 and gear >= 1.5),(gear <= 2.5 and gear >= 1.5),"{'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '>='}}}}",The gear value is between 1.5 and 2.5 (inclusive).,gear_2_phi
"G [0, 30] (((not (gear <= 2.5 and gear >= 1.5)) and (F [0.001,0.1] (gear <= 2.5 and gear >= 1.5))) implies (F [0.001, 0.1] (G [0,2.5] (gear <= 2.5 and gear >= 1.5))))","Always [0, 30] (((not (gear <= 2.5 and gear >= 1.5)) and (Finally [0.001,0.1] (gear <= 2.5 and gear >= 1.5))) implies (Finally [0.001, 0.1] (Always [0,2.5] (gear <= 2.5 and gear >= 1.5))))","{'always_bounded': {'child_node': {'implies': {'left_node': {'and': {'left_node': {'not': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '>='}}}}}}, 'right_node': {'eventually_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '>='}}}}, 'bound': [0.001, 0.1]}}}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 1.5, 'type': '>='}}}}, 'bound': [0.0, 2.5]}}, 'bound': [0.001, 0.1]}}}}, 'bound': [0.0, 30.0]}}","Always, in the time interval [0,30], if the gear is not between 1.5 and 2.5 and will be in that range in the next [0.001,0.1] time units, then it will remain in that range for the following [0,2.5] time units.",AT52_phi
(gear <= 3.5 and gear >= 2.5),(gear <= 3.5 and gear >= 2.5),"{'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '>='}}}}",The gear value is between 2.5 and 3.5 (inclusive).,gear_3_phi
"G [0, 30] (((not (gear <= 3.5 and gear >= 2.5)) and (F [0.001,0.1] (gear <= 3.5 and gear >= 2.5))) implies (F [0.001, 0.1] (G [0,2.5] (gear <= 3.5 and gear >= 2.5))))","Always [0, 30] (((not (gear <= 3.5 and gear >= 2.5)) and (Finally [0.001,0.1] (gear <= 3.5 and gear >= 2.5))) implies (Finally [0.001, 0.1] (Always [0,2.5] (gear <= 3.5 and gear >= 2.5))))","{'always_bounded': {'child_node': {'implies': {'left_node': {'and': {'left_node': {'not': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '>='}}}}}}, 'right_node': {'eventually_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '>='}}}}, 'bound': [0.001, 0.1]}}}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 2.5, 'type': '>='}}}}, 'bound': [0.0, 2.5]}}, 'bound': [0.001, 0.1]}}}}, 'bound': [0.0, 30.0]}}","Always, in the time interval [0,30], if the gear is not between 2.5 and 3.5 and will be in that range in the next [0.001,0.1] time units, then it will remain in that range for the following [0,2.5] time units.",AT53_phi
(gear <= 4.5 and gear >= 3.5),(gear <= 4.5 and gear >= 3.5),"{'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 4.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '>='}}}}",The gear value is between 3.5 and 4.5 (inclusive).,gear_4_phi
"G [0, 30] (((not (gear <= 4.5 and gear >= 3.5)) and (F [0.001,0.1] (gear <= 4.5 and gear >= 3.5))) implies (F [0.001, 0.1] (G [0,2.5] (gear <= 4.5 and gear >= 3.5))))","Always [0, 30] (((not (gear <= 4.5 and gear >= 3.5)) and (Finally [0.001,0.1] (gear <= 4.5 and gear >= 3.5))) implies (Finally [0.001, 0.1] (Always [0,2.5] (gear <= 4.5 and gear >= 3.5))))","{'always_bounded': {'child_node': {'implies': {'left_node': {'and': {'left_node': {'not': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 4.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '>='}}}}}}, 'right_node': {'eventually_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 4.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '>='}}}}, 'bound': [0.001, 0.1]}}}}, 'right_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'and': {'left_node': {'predicate': {'left_node': 'gear', 'right_node': 4.5, 'type': '<='}}, 'right_node': {'predicate': {'left_node': 'gear', 'right_node': 3.5, 'type': '>='}}}}, 'bound': [0.0, 2.5]}}, 'bound': [0.001, 0.1]}}}}, 'bound': [0.0, 30.0]}}","Always, in the time interval [0,30], if the gear is not between 3.5 and 4.5 and will be in that range in the next [0.001,0.1] time units, then it will remain in that range for the following [0,2.5] time units.",AT54_phi
"((G [0, 30] (rpm <= 3000)) implies (G [0,4] (speed <= 35)))","((Always [0, 30] (rpm <= 3000)) implies (Always [0,4] (speed <= 35)))","{'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'rpm', 'right_node': 3000.0, 'type': '<='}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'speed', 'right_node': 35.0, 'type': '<='}}, 'bound': [0.0, 4.0]}}}}","Always, in the time interval [0,30], if the rpm is less than or equal to 3000, then the speed will always be less than or equal to 35 in the time interval [0,4].",AT6a_phi
"((G [0, 30] (rpm <= 3000)) implies (G [0,8] (speed <= 50)))","((Always [0, 30] (rpm <= 3000)) implies (Always [0,8] (speed <= 50)))","{'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'rpm', 'right_node': 3000.0, 'type': '<='}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'speed', 'right_node': 50.0, 'type': '<='}}, 'bound': [0.0, 8.0]}}}}","Always, in the time interval [0,30], if the rpm is less than or equal to 3000, then the speed will always be less than or equal to 50 in the time interval [0,8].",AT6b_phi
"((G [0, 30] (rpm <= 3000)) implies (G [0,20] (speed <= 65)))","((Always [0, 30] (rpm <= 3000)) implies (Always [0,20] (speed <= 65)))","{'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'rpm', 'right_node': 3000.0, 'type': '<='}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'speed', 'right_node': 65.0, 'type': '<='}}, 'bound': [0.0, 20.0]}}}}","Always, in the time interval [0,30], if the rpm is less than or equal to 3000, then the speed will always be less than or equal to 65 in the time interval [0,20].",AT6c_phi
"((G [0, 30] (rpm <= 3000)) implies (G [0,4] (speed <= 35))) and ((G [0, 30] (rpm <= 3000)) implies (G [0,8] (speed <= 50))) and ((G [0, 30] (rpm <= 3000)) implies (G [0,20] (speed <= 65)))","((Always [0, 30] (rpm <= 3000)) implies (Always [0,4] (speed <= 35))) and ((Always [0, 30] (rpm <= 3000)) implies (Always [0,8] (speed <= 50))) and ((Always [0, 30] (rpm <= 3000)) implies (Always [0,20] (speed <= 65)))","{'and': {'left_node': {'and': {'left_node': {'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'rpm', 'right_node': 3000.0, 'type': '<='}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'speed', 'right_node': 35.0, 'type': '<='}}, 'bound': [0.0, 4.0]}}}}, 'right_node': {'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'rpm', 'right_node': 3000.0, 'type': '<='}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'speed', 'right_node': 50.0, 'type': '<='}}, 'bound': [0.0, 8.0]}}}}}}, 'right_node': {'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'rpm', 'right_node': 3000.0, 'type': '<='}}, 'bound': [0.0, 30.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'speed', 'right_node': 65.0, 'type': '<='}}, 'bound': [0.0, 20.0]}}}}}}","Always, in the time interval [0,30], if the rpm is less than or equal to 3000, then the speed will always be less than or equal to 35 in the time interval [0,4], less than or equal to 50 in the time interval [0,8], and less than or equal to 65 in the time interval [0,20].",AT6abc_phi
"G [0, 100] (y54 <= 40)","Always [0, 100] (y54 <= 40)","{'always_bounded': {'child_node': {'predicate': {'left_node': 'y54', 'right_node': 40.0, 'type': '<='}}, 'bound': [0.0, 100.0]}}","Always, in the time interval [0,100], the value of 'y54' is less than or equal to 40.",CC1_phi
"G [0, 70] (F [0,30] (y54 >= 15))","Always [0, 70] (Finally [0,30] (y54 >= 15))","{'always_bounded': {'child_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'y54', 'right_node': 15.0, 'type': '>='}}, 'bound': [0.0, 30.0]}}, 'bound': [0.0, 70.0]}}","Always, in the time interval [0,70], there exists a time in the next [0,30] time units where the value of 'y54' is greater than or equal to 15.",CC2_phi
"G [0, 80] ((G [0, 20] (y21 <= 20)) or (F [0,20] (y54 >= 40)))","Always [0, 80] ((Always [0, 20] (y21 <= 20)) or (Finally [0,20] (y54 >= 40)))","{'always_bounded': {'child_node': {'or': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y21', 'right_node': 20.0, 'type': '<='}}, 'bound': [0.0, 20.0]}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'y54', 'right_node': 40.0, 'type': '>='}}, 'bound': [0.0, 20.0]}}}}, 'bound': [0.0, 80.0]}}","Always, in the time interval [0,80], either the value of 'y21' is always less than or equal to 20 in the next [0,20] time units, or there exists a time in the next [0,20] time units where the value of 'y54' is greater than or equal to 40.",CC3_phi
"G [0,65] (F [0,30] (G [0,20] (y54 >= 8)))","Always [0,65] (Finally [0,30] (Always [0,20] (y54 >= 8)))","{'always_bounded': {'child_node': {'eventually_bounded': {'child_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y54', 'right_node': 8.0, 'type': '>='}}, 'bound': [0.0, 20.0]}}, 'bound': [0.0, 30.0]}}, 'bound': [0.0, 65.0]}}","Always, in the time interval [0,65], there exists a time in the next [0,30] time units where the value of 'y54' is always greater than or equal to 8 in the following [0,20] time units.",CC4_phi
"G [0,72] (F [0,8] ((G [0,5] (y21 >= 9)) implies (G [5,20] (y54 >= 9))))","Always [0,72] (Finally [0,8] ((Always [0,5] (y21 >= 9)) implies (Always [5,20] (y54 >= 9))))","{'always_bounded': {'child_node': {'eventually_bounded': {'child_node': {'implies': {'left_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y21', 'right_node': 9.0, 'type': '>='}}, 'bound': [0.0, 5.0]}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'y54', 'right_node': 9.0, 'type': '>='}}, 'bound': [5.0, 20.0]}}}}, 'bound': [0.0, 8.0]}}, 'bound': [0.0, 72.0]}}","Always, in the time interval [0,72], there exists a time in the next [0,8] time units where if the value of 'y21' is always greater than or equal to 9 in the next [0,5] time units, then the value of 'y54' will always be greater than or equal to 9 in the following [5,20] time units.",CC5_phi
"(G [0, 50] (y21 >= 7.5))","(Always [0, 50] (y21 >= 7.5))","{'always_bounded': {'child_node': {'predicate': {'left_node': 'y21', 'right_node': 7.5, 'type': '>='}}, 'bound': [0.0, 50.0]}}","Always, in the time interval [0,50], the value of 'y21' is greater than or equal to 7.5.",phi_1
"(G [0, 50] (y32 >= 7.5))","(Always [0, 50] (y32 >= 7.5))","{'always_bounded': {'child_node': {'predicate': {'left_node': 'y32', 'right_node': 7.5, 'type': '>='}}, 'bound': [0.0, 50.0]}}","Always, in the time interval [0,50], the value of 'y32' is greater than or equal to 7.5.",phi_2
"(G [0, 50] (y43 >= 7.5))","(Always [0, 50] (y43 >= 7.5))","{'always_bounded': {'child_node': {'predicate': {'left_node': 'y43', 'right_node': 7.5, 'type': '>='}}, 'bound': [0.0, 50.0]}}","Always, in the time interval [0,50], the value of 'y43' is greater than or equal to 7.5.",phi_3
"(G [0, 50] (y54 >= 7.5))","(Always [0, 50] (y54 >= 7.5))","{'always_bounded': {'child_node': {'predicate': {'left_node': 'y54', 'right_node': 7.5, 'type': '>='}}, 'bound': [0.0, 50.0]}}","Always, in the time interval [0,50], the value of 'y54' is greater than or equal to 7.5.",phi_4
"muA until[0,2] muB","muA until[0,2] muB","{'until': {'left_node': 'proposition', 'right_node': 'proposition', 'bound': [0.0, 2.0]}}","State A should hold true until, within the time duration from 0 to 2, state B becomes true.",
"muC until[0,3] (muD and F [0,1]muE)","muC until[0,3] (muD and Finally [0,1]muE)","{'until': {'left_node': 'proposition', 'right_node': {'and': {'left_node': 'proposition', 'right_node': {'eventually_bounded': {'child_node': 'proposition', 'bound': [0.0, 1.0]}}}}, 'bound': [0.0, 3.0]}}","State C should hold true until, within the time duration from 0 to 3, state D becomes true and then, within the next time unit, state E becomes true.",
" not muF until[1,4] (muG or muH)"," not muF until[1,4] (muG or muH)","{'not': {'child_node': {'until': {'left_node': 'proposition', 'right_node': {'or': {'left_node': 'proposition', 'right_node': 'proposition'}}, 'bound': [1.0, 4.0]}}}}","The system should avoid state F until, between time 1 and time 4, either state G or state H becomes true.",
"speed < 20 until[0,2] speed >= 25","speed < 20 until[0,2] speed >= 25","{'until': {'left_node': {'predicate': {'left_node': 'speed', 'right_node': 20.0, 'type': '<'}}, 'right_node': {'predicate': {'left_node': 'speed', 'right_node': 25.0, 'type': '>='}}, 'bound': [0.0, 2.0]}}","The speed should be less than 20 until, within the time duration from 0 to 2, it becomes greater than or equal to 25.",
"muI until[1,3] muJ","muI until[1,3] muJ","{'until': {'left_node': 'proposition', 'right_node': 'proposition', 'bound': [1.0, 3.0]}}","State I should hold true until, within the time duration from 1 to 3, state J becomes true.",
"temperature < 25 until[0,4] temperature >= 30","temperature < 25 until[0,4] temperature >= 30","{'until': {'left_node': {'predicate': {'left_node': 'temperature', 'right_node': 25.0, 'type': '<'}}, 'right_node': {'predicate': {'left_node': 'temperature', 'right_node': 30.0, 'type': '>='}}, 'bound': [0.0, 4.0]}}","The temperature should be less than 25°C until, within the time duration from 0 to 4, it becomes greater than or equal to 30°C.",
"muK until[2,5] (muL and F [0,2]muM)","muK until[2,5] (muL and Finally [0,2]muM)","{'until': {'left_node': 'proposition', 'right_node': {'and': {'left_node': 'proposition', 'right_node': {'eventually_bounded': {'child_node': 'proposition', 'bound': [0.0, 2.0]}}}}, 'bound': [2.0, 5.0]}}","State K should hold true until, within the time duration from 2 to 5, state L becomes true and then, within the next 2 time units, state M becomes true.",
" not muN until[0,3] (muO or muP)"," not muN until[0,3] (muO or muP)","{'not': {'child_node': {'until': {'left_node': 'proposition', 'right_node': {'or': {'left_node': 'proposition', 'right_node': 'proposition'}}, 'bound': [0.0, 3.0]}}}}","The system should avoid state N until, within the time duration from 0 to 3, either state O or state P becomes true.",
"pressure < 1000 until[1,2] pressure >= 1050","pressure < 1000 until[1,2] pressure >= 1050","{'until': {'left_node': {'predicate': {'left_node': 'pressure', 'right_node': 1000.0, 'type': '<'}}, 'right_node': {'predicate': {'left_node': 'pressure', 'right_node': 1050.0, 'type': '>='}}, 'bound': [1.0, 2.0]}}","The pressure should be less than 1000 hPa until, within the time duration from 1 to 2, it becomes greater than or equal to 1050 hPa.",
"muQ until[0,6] (muR and (muS until[0,2] muT))","muQ until[0,6] (muR and (muS until[0,2] muT))","{'until': {'left_node': 'proposition', 'right_node': {'and': {'left_node': 'proposition', 'right_node': {'until': {'left_node': 'proposition', 'right_node': 'proposition', 'bound': [0.0, 2.0]}}}}, 'bound': [0.0, 6.0]}}","State Q should hold true until, within the time duration from 0 to 6, state R becomes true and, within that period, state S should hold true until, within the time duration from 0 to 2, state T becomes true.",
"voltage < 5 until[2,4] (voltage >= 10 and F [0,1] voltage < 3)","voltage < 5 until[2,4] (voltage >= 10 and Finally [0,1] voltage < 3)","{'until': {'left_node': {'predicate': {'left_node': 'voltage', 'right_node': 5.0, 'type': '<'}}, 'right_node': {'and': {'left_node': {'predicate': {'left_node': 'voltage', 'right_node': 10.0, 'type': '>='}}, 'right_node': {'eventually_bounded': {'child_node': {'predicate': {'left_node': 'voltage', 'right_node': 3.0, 'type': '<'}}, 'bound': [0.0, 1.0]}}}}, 'bound': [2.0, 4.0]}}","The voltage should be less than 5V until, within the time duration from 2 to 4, it becomes greater than or equal to 10V and then, within the next time unit, it drops below 3V.",
"muU until[1,5] ( not muV and G [0,3]muW)","muU until[1,5] ( not muV and Always [0,3]muW)","{'until': {'left_node': 'proposition', 'right_node': {'and': {'left_node': {'not': {'child_node': 'proposition'}}, 'right_node': {'always_bounded': {'child_node': 'proposition', 'bound': [0.0, 3.0]}}}}, 'bound': [1.0, 5.0]}}","State U should hold true until, within the time duration from 1 to 5, state V becomes false and, during that period, state W should eventually become true within 3 time units.",
"humidity > 70 until[0,3] (humidity <= 50 and X[0,2] humidity > 90)","humidity > 70 until[0,3] (humidity <= 50 and X[0,2] humidity > 90)","{'until': {'left_node': {'predicate': {'left_node': 'humidity', 'right_node': 70.0, 'type': '>'}}, 'right_node': {'and': {'left_node': {'predicate': {'left_node': 'humidity', 'right_node': 50.0, 'type': '<='}}, 'right_node': {'next_bounded': {'child_node': {'predicate': {'left_node': 'humidity', 'right_node': 90.0, 'type': '>'}}, 'bound': [0.0, 2.0]}}}}, 'bound': [0.0, 3.0]}}","The humidity should be greater than 70% until, within the time duration from 0 to 3, it becomes less than or equal to 50% and, during that period, it should once exceed 90% within 2 time units.",
"muX until[2,7] (muY or (muZ and F [0,2] muA1))","muX until[2,7] (muY or (muZ and Finally [0,2] muA1))","{'until': {'left_node': 'proposition', 'right_node': {'or': {'left_node': 'proposition', 'right_node': {'and': {'left_node': 'proposition', 'right_node': {'eventually_bounded': {'child_node': 'proposition', 'bound': [0.0, 2.0]}}}}}}, 'bound': [2.0, 7.0]}}","State X should hold true until, within the time duration from 2 to 7, either state Y becomes true or state Z becomes true and then, within the next 2 time units, state A1 becomes true.",
"current == 10 until[1,6] (current < 5 or G [0,3] current > 15)","current == 10 until[1,6] (current < 5 or Always [0,3] current > 15)","{'until': {'left_node': {'predicate': {'left_node': 'current', 'right_node': 10.0, 'type': '=='}}, 'right_node': {'or': {'left_node': {'predicate': {'left_node': 'current', 'right_node': 5.0, 'type': '<'}}, 'right_node': {'always_bounded': {'child_node': {'predicate': {'left_node': 'current', 'right_node': 15.0, 'type': '>'}}, 'bound': [0.0, 3.0]}}}}, 'bound': [1.0, 6.0]}}","The current should be 10A until, within the time duration from 1 to 6, it becomes less than 5A or, during that period, it should eventually exceed 15A within 3 time units.",
"muB1 until[0,8] (muC1 and (muD1 until[1,3] muE1))","muB1 until[0,8] (muC1 and (muD1 until[1,3] muE1))","{'until': {'left_node': 'proposition', 'right_node': {'and': {'left_node': 'proposition', 'right_node': {'until': {'left_node': 'proposition', 'right_node': 'proposition', 'bound': [1.0, 3.0]}}}}, 'bound': [0.0, 8.0]}}","State B1 should hold true until, within the time duration from 0 to 8, state C1 becomes true and, within that period, state D1 should hold true until, within the time duration from 1 to 3, state E1 becomes true.",